Event handling in React : 
Event handling in react is how you make your app do something when the user interacts with it, Like clicking a button , submitting a form
1. clicking a button(onClick)
2. presenting a key(keyDown)
3. Moving the mouse(onMouseMove)
4. Typing a text box(onChange)
How to use Events in React:
Use camelCase for event names
Pass a function to the event(not a function call). This function will run when the event happens
a)click Event():
function App(){
    const handleClick=()=>{
        alert("Button Clicked")
    };
    return(
        <div style={{textAlign : 'center' , padding : '20px'}}>
        <button onClick={handleClick}>Click This</button>
        </div>
    )
}
export default App;
b) Change event(onChange):
This happens when you type in a text box
Key points:
Target is a property of the event object , and is predefined by javascript for DOM events
event.target : always refers to the element that triggered the event
event.target.value : used to access the value of input elements buttons , form elements
Example:
import React , {useState} from 'react';
function App(){
    const[text , setText]=useState("")
    //initially the value is set as empty string
    const handleChange=(event)=>{
        setText(event.target.value)
        //update the text state with the value input
    }
    return(
        <div style={{textAlign : 'center' , padding : '20px'}}>
            <input type="text" value={text} onChange={handleChange} />
            <p>Your text : {text}</p>
        </div>
    )
}
export default App;
c)Mouse events (onMouseEnter ,  onMouseLeave):
import React , {useState} from 'react';
function App(){
    const[isHovered , setIsHovered]=useState(false);
    const handleMouseEnter=()=>{
        setIsHovered(true);
    }
    const handleMouseLeave=()=>{
        setIsHovered(false);
    }
    return(
        <div>
            <button onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} style={{backgroundColor:'isHovered'?'red':'cadetblue' , color:'isHovered'?'white':'blue'}}>Hover this:{isHovered}</button>
            
        </div>
    )
}
export default App;


