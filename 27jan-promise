Promise:
	A promise is a special javascript object that represents the eventual competition(or failure) of an asynchronous operation.
	It allows to handle asynchronous tasks more efficiently than callbacks.
THREE STATES:
1.	Pending: The initial state , the promise is still waiting for the operation to finish
2.	Fullfilled: The operation completed successfully
3.	Rejected: The operation failed
EXP:
1.	To create a promise new promise()
      Two parameters
              Resolve to mark the promise as successful
              Reject mark it as failed
2.	Handling the result:
.then() method is called when promise is fulfilled
it will receive the result from resolve()
.catch()  method is called if the promise is rejected it receives the error message from reject()

Example:
let mypromise = new Promise((resolve,reject)=>{
            let success = true;
            if(success){
                resolve("The operation is successfull");
            }else{
                reject("The operation is failed");
            }
        });
        mypromise
        .then(result=>{
            console.log(result);
        })
        .catch(error=>{
            console.log(error);
        })
Changing Promises:
Example:
let promise = new Promise((resolve,reject)=>{
            resolve(5);
            //initial resolve value is 5
        })
        promise 
        .then(result=>{
            console.log(result);
            return result*2
            //return a new value
        })
        .then(result=>{
            console.log(result);
            return result+3
            //return a new value
        })
        .then(result=>{
            console.log(result);
        })
        .catch(error=>{
            console.log("error",error);
        })
Promise with setTimeout:
--asynchronous task using setTimeout and the promise will resolve after a certain amount of time
Example:
let promises = new Promise((resolve,reject)=>{
            setTimeout(() => {
                resolve("The operation is successfull");
                }, 2000);
            });
            promises
            .then(result=>{
                console.log(result);
            })
            .catch(error=>{
                console.log(error);
                })

